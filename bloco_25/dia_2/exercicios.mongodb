// Exercício 1 : Utilize uma combinação das expressões aritméticas e adicione um campo chamado idade à coleção clientes
use("erp");
db.clientes.aggregate([
  { $addFields: {
    idade: {
      $floor: {
        $divide: [
          { $subtract: ["$$NOW", "$dataNascimento"] },
          60 * 60 * 24 * 1000 * 365
        ]
      }
    }
  } }
]);

// Exercício 2 : Utilizando o novo campo idade , conte quantos clientes têm entre 18 e 25 anos.
use("erp");
db.clientes.aggregate([
  { $addFields: {
    idade: {
      $floor: {
        $divide: [
          { $subtract: ["$$NOW", "$dataNascimento"] },
          60 * 60 * 24 * 1000 * 365
        ]
      }
    }
  } },
  { $match: { idade: { $gte: 18, $lte: 25 } } },
  { $count: "totalClientes" }
]);

// Exercício 3 : Remova os estágios $count e $match do exercício anterior e adicione um estágio no pipeline que coloque as compras do cliente no campo compras .
use("erp");
db.clientes.aggregate([
  { $addFields: {
    idade: {
      $floor: {
        $divide: [
          { $subtract: ["$$NOW", "$dataNascimento"] },
          60 * 60 * 24 * 1000 * 365
        ]
      }
    }
  } },
  { $lookup: {
    from: "vendas",
    localField: "clienteId",
    foreignField: "clienteId",
    as: "compras"
  } }
]);

// Exercício 4 : Selecione TODOS os clientes que compraram entre Junho de 2019 e Março de 2020
use("erp");
db.clientes.aggregate([
  { $addFields: {
    idade: {
      $floor: {
        $divide: [
          { $subtract: ["$$NOW", "$dataNascimento"] },
          60 * 60 * 24 * 1000 * 365
        ]
      }
    }
  } },
  { $lookup: {
    from: "vendas",
    localField: "clienteId",
    foreignField: "clienteId",
    as: "compras"
  } },
  { $match: {
    "compras.dataVenda": {
      $gte: ISODate('2019-06-01'),
      $lte: ISODate('2020-03-31'),
    }
  } },
]);

// Confira o número de documentos retornados pelo pipeline com o método itcount() . Até aqui, você deve ter 486 documentos sendo retornados.
use("erp");
db.clientes.aggregate([
  { $addFields: {
    idade: {
      $floor: {
        $divide: [
          { $subtract: ["$$NOW", "$dataNascimento"] },
          60 * 60 * 24 * 1000 * 365
        ]
      }
    }
  } },
  { $lookup: {
    from: "vendas",
    localField: "clienteId",
    foreignField: "clienteId",
    as: "compras"
  } },
  { $match: {
    "compras.dataVenda": {
      $gte: ISODate('2019-06-01'),
      $lte: ISODate('2020-03-31'),
    }
  } },
]).itcount();

// Exercício 6 : Ainda nesse pipeline , descubra os 5 estados com mais compras.

use("erp");
db.clientes.aggregate([
  { $addFields: {
    idade: {
      $floor: {
        $divide: [
          { $subtract: ["$$NOW", "$dataNascimento"] },
          60 * 60 * 24 * 1000 * 365
        ]
      }
    }
  } },
  { $lookup: {
    from: "vendas",
    localField: "clienteId",
    foreignField: "clienteId",
    as: "compras"
  } },
  { $match: {
    "compras.dataVenda": {
      $gte: ISODate('2019-06-01'),
      $lte: ISODate('2020-03-31'),
    }
  } },
  { $unwind: "$compras" },
  { $group: {
    _id: "$endereco.uf",
    totalCompras: { $sum: 1 }
  } },
  { $sort: { "totalCompras": -1 } },
  { $limit: 5 }
]);

// Exercício 7 : Descubra o cliente que mais consumiu QUEIJO PRATO . Retorne um documento com a seguinte estrutura:
// {
//   "nomeCliente": "NOME",
//   "uf": "UF DO CLIENTE",
//   "totalConsumido": 100
// }
use("erp");
db.clientes.aggregate([
  { $addFields: {
    idade: {
      $floor: {
        $divide: [
          { $subtract: ["$$NOW", "$dataNascimento"] },
          60 * 60 * 24 * 1000 * 365
        ]
      }
    }
  } },
  { $lookup: {
    from: "vendas",
    localField: "clienteId",
    foreignField: "clienteId",
    as: "compras"
  } },
  { $unwind: "$compras" },
  { $unwind: "$compras.itens" },
  { $match: {
    "compras.itens.nome": "QUEIJO PRATO"
  } },
  { $group: {
    _id: "$clienteId",
    nomeCliente: { $first: "$nome" },
    uf: { $first: "$endereco.uf" },
    totalConsumido: { $sum: "$compras.itens.quantidade" }
  } },
  { $sort: { totalConsumido: -1 } },
  { $limit: 1 },
  { $project: {  _id: false } }
]);

// Exercício 8 : Selecione todas as vendas do mês de Março de 2020 , com status EM SEPARACAO . Acrescente um campo chamado dataEntregaPrevista com valor igual a três dias após a data da venda. Retorne apenas os campos clienteId , dataVenda e dataEntregaPrevista .
use("erp");
db.vendas.aggregate([
  { $match: {
    "dataVenda": {
      $gte: ISODate('2020-03-01'),
      $lte: ISODate('2020-03-31'),
    },
    status: "EM SEPARACAO"
  } },
  { $addFields: {
    dataEntregaPrevista: { $add: ["$dataVenda", 60 * 60 * 24 * 1000 * 3] }
  } },
  { $project: {
    clienteId: true,
    dataVenda: true,
    dataEntregaPrevista: true,
    _id: false,
  } }
]);

// Exercício 9 : Calcule a diferença absoluta em dias entre a data da primeira entrega prevista e a última, considerando o pipeline do exercício 8.
use("erp");
db.vendas.aggregate([
  { $match: {
    "dataVenda": {
      $gte: ISODate('2020-03-01'),
      $lte: ISODate('2020-03-31'),
    },
    status: "EM SEPARACAO"
  } },
  { $addFields: {
    dataEntregaPrevista: { $add: ["$dataVenda", 60 * 60 * 24 * 1000 * 3] }
  } },
  { $project: {
    clienteId: true,
    dataVenda: true,
    dataEntregaPrevista: true,
    _id: false,
  } },
  { $group: {
    _id: null,
    maximaData: { $max: "$dataEntregaPrevista" },
    minimaData: { $min: "$dataEntregaPrevista" },
  } },
  { $project: {
    intervalo: { $ceil: 
    { $divide: [
      { $abs: { $subtract: ["$minimaData", "$maximaData"] } },
      60 * 60 * 24 * 1000
    ] } },
    _id: false
  } }
]);
